#!/usr/bin/env node
"use strict";

var _readlineSync = _interopRequireDefault(require("readline-sync"));

var _ = _interopRequireDefault(require(".."));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const getArithmeticProgression = () => {
  const userName = (0, _.default)();
  console.log('What number is missing in the progression?');

  for (let i = 0; i < 3; i += 1) {
    let startNumberProgression = Math.floor(Math.random() * Math.floor(100));
    const numberChangeProgression = Math.floor(Math.random() * Math.floor(100));
    const indexProgression = Math.floor(Math.random() * Math.floor(10));
    const resultArithmeticProgression = [];
    let rightAnswer = 0;

    for (let count = 1; count < 10; count += 1) {
      startNumberProgression += numberChangeProgression;
      resultArithmeticProgression.push(startNumberProgression);
    }

    rightAnswer = resultArithmeticProgression[indexProgression];
    resultArithmeticProgression[indexProgression] = '..';
    console.log(`Question: ${resultArithmeticProgression.join(' ')}`);

    const answer = _readlineSync.default.question('Your answer: ');

    if (rightAnswer === parseInt(answer, 10)) {
      console.log('Correct!');
    } else {
      console.log(`"${answer}" is wrong answer ;(. Correct answer was "${rightAnswer}".`);
      console.log(`Let's try again, ${userName}!`);
      return;
    }
  }

  console.log(`Congratulations, ${userName}!`);
};

getArithmeticProgression();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9iaW4vZ2FtZXMvYnJhaW4tcHJvZ3Jlc3Npb24uanMiXSwibmFtZXMiOlsiZ2V0QXJpdGhtZXRpY1Byb2dyZXNzaW9uIiwidXNlck5hbWUiLCJjb25zb2xlIiwibG9nIiwiaSIsInN0YXJ0TnVtYmVyUHJvZ3Jlc3Npb24iLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJudW1iZXJDaGFuZ2VQcm9ncmVzc2lvbiIsImluZGV4UHJvZ3Jlc3Npb24iLCJyZXN1bHRBcml0aG1ldGljUHJvZ3Jlc3Npb24iLCJyaWdodEFuc3dlciIsImNvdW50IiwicHVzaCIsImpvaW4iLCJhbnN3ZXIiLCJyZWFkbGluZVN5bmMiLCJxdWVzdGlvbiIsInBhcnNlSW50Il0sIm1hcHBpbmdzIjoiQUFBQTs7O0FBQ0E7O0FBQ0E7Ozs7QUFFQSxNQUFNQSx3QkFBd0IsR0FBRyxNQUFNO0FBQ3JDLFFBQU1DLFFBQVEsR0FBRyxnQkFBakI7QUFDQUMsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksNENBQVo7O0FBQ0EsT0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLENBQXBCLEVBQXVCQSxDQUFDLElBQUksQ0FBNUIsRUFBK0I7QUFDN0IsUUFBSUMsc0JBQXNCLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXRCxJQUFJLENBQUNFLE1BQUwsS0FBZ0JGLElBQUksQ0FBQ0MsS0FBTCxDQUFXLEdBQVgsQ0FBM0IsQ0FBN0I7QUFDQSxVQUFNRSx1QkFBdUIsR0FBR0gsSUFBSSxDQUFDQyxLQUFMLENBQVdELElBQUksQ0FBQ0UsTUFBTCxLQUFnQkYsSUFBSSxDQUFDQyxLQUFMLENBQVcsR0FBWCxDQUEzQixDQUFoQztBQUNBLFVBQU1HLGdCQUFnQixHQUFHSixJQUFJLENBQUNDLEtBQUwsQ0FBV0QsSUFBSSxDQUFDRSxNQUFMLEtBQWdCRixJQUFJLENBQUNDLEtBQUwsQ0FBVyxFQUFYLENBQTNCLENBQXpCO0FBQ0EsVUFBTUksMkJBQTJCLEdBQUcsRUFBcEM7QUFDQSxRQUFJQyxXQUFXLEdBQUcsQ0FBbEI7O0FBRUEsU0FBSyxJQUFJQyxLQUFLLEdBQUcsQ0FBakIsRUFBb0JBLEtBQUssR0FBRyxFQUE1QixFQUFnQ0EsS0FBSyxJQUFJLENBQXpDLEVBQTRDO0FBQzFDUixNQUFBQSxzQkFBc0IsSUFBSUksdUJBQTFCO0FBQ0FFLE1BQUFBLDJCQUEyQixDQUFDRyxJQUE1QixDQUFpQ1Qsc0JBQWpDO0FBQ0Q7O0FBRURPLElBQUFBLFdBQVcsR0FBR0QsMkJBQTJCLENBQUNELGdCQUFELENBQXpDO0FBQ0FDLElBQUFBLDJCQUEyQixDQUFDRCxnQkFBRCxDQUEzQixHQUFnRCxJQUFoRDtBQUVBUixJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBYSxhQUFZUSwyQkFBMkIsQ0FBQ0ksSUFBNUIsQ0FBaUMsR0FBakMsQ0FBc0MsRUFBL0Q7O0FBQ0EsVUFBTUMsTUFBTSxHQUFHQyxzQkFBYUMsUUFBYixDQUFzQixlQUF0QixDQUFmOztBQUNBLFFBQUlOLFdBQVcsS0FBS08sUUFBUSxDQUFDSCxNQUFELEVBQVMsRUFBVCxDQUE1QixFQUEwQztBQUN4Q2QsTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksVUFBWjtBQUNELEtBRkQsTUFFTztBQUNMRCxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBYSxJQUFHYSxNQUFPLDZDQUE0Q0osV0FBWSxJQUEvRTtBQUNBVixNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBYSxvQkFBbUJGLFFBQVMsR0FBekM7QUFDQTtBQUNEO0FBQ0Y7O0FBQ0RDLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFhLG9CQUFtQkYsUUFBUyxHQUF6QztBQUNELENBN0JEOztBQStCQUQsd0JBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxuaW1wb3J0IHJlYWRsaW5lU3luYyBmcm9tICdyZWFkbGluZS1zeW5jJztcbmltcG9ydCBnZXRVc2VyTmFtZSBmcm9tICcuLic7XG5cbmNvbnN0IGdldEFyaXRobWV0aWNQcm9ncmVzc2lvbiA9ICgpID0+IHtcbiAgY29uc3QgdXNlck5hbWUgPSBnZXRVc2VyTmFtZSgpO1xuICBjb25zb2xlLmxvZygnV2hhdCBudW1iZXIgaXMgbWlzc2luZyBpbiB0aGUgcHJvZ3Jlc3Npb24/Jyk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSArPSAxKSB7XG4gICAgbGV0IHN0YXJ0TnVtYmVyUHJvZ3Jlc3Npb24gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBNYXRoLmZsb29yKDEwMCkpO1xuICAgIGNvbnN0IG51bWJlckNoYW5nZVByb2dyZXNzaW9uID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogTWF0aC5mbG9vcigxMDApKTtcbiAgICBjb25zdCBpbmRleFByb2dyZXNzaW9uID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogTWF0aC5mbG9vcigxMCkpO1xuICAgIGNvbnN0IHJlc3VsdEFyaXRobWV0aWNQcm9ncmVzc2lvbiA9IFtdO1xuICAgIGxldCByaWdodEFuc3dlciA9IDA7XG5cbiAgICBmb3IgKGxldCBjb3VudCA9IDE7IGNvdW50IDwgMTA7IGNvdW50ICs9IDEpIHtcbiAgICAgIHN0YXJ0TnVtYmVyUHJvZ3Jlc3Npb24gKz0gbnVtYmVyQ2hhbmdlUHJvZ3Jlc3Npb247XG4gICAgICByZXN1bHRBcml0aG1ldGljUHJvZ3Jlc3Npb24ucHVzaChzdGFydE51bWJlclByb2dyZXNzaW9uKTtcbiAgICB9XG5cbiAgICByaWdodEFuc3dlciA9IHJlc3VsdEFyaXRobWV0aWNQcm9ncmVzc2lvbltpbmRleFByb2dyZXNzaW9uXTtcbiAgICByZXN1bHRBcml0aG1ldGljUHJvZ3Jlc3Npb25baW5kZXhQcm9ncmVzc2lvbl0gPSAnLi4nO1xuXG4gICAgY29uc29sZS5sb2coYFF1ZXN0aW9uOiAke3Jlc3VsdEFyaXRobWV0aWNQcm9ncmVzc2lvbi5qb2luKCcgJyl9YCk7XG4gICAgY29uc3QgYW5zd2VyID0gcmVhZGxpbmVTeW5jLnF1ZXN0aW9uKCdZb3VyIGFuc3dlcjogJyk7XG4gICAgaWYgKHJpZ2h0QW5zd2VyID09PSBwYXJzZUludChhbnN3ZXIsIDEwKSkge1xuICAgICAgY29uc29sZS5sb2coJ0NvcnJlY3QhJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKGBcIiR7YW5zd2VyfVwiIGlzIHdyb25nIGFuc3dlciA7KC4gQ29ycmVjdCBhbnN3ZXIgd2FzIFwiJHtyaWdodEFuc3dlcn1cIi5gKTtcbiAgICAgIGNvbnNvbGUubG9nKGBMZXQncyB0cnkgYWdhaW4sICR7dXNlck5hbWV9IWApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBjb25zb2xlLmxvZyhgQ29uZ3JhdHVsYXRpb25zLCAke3VzZXJOYW1lfSFgKTtcbn07XG5cbmdldEFyaXRobWV0aWNQcm9ncmVzc2lvbigpO1xuIl19